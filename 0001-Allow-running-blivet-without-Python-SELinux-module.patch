From 97da7024c1e11418422c9cc293c78628ed6e0658 Mon Sep 17 00:00:00 2001
From: Vojtech Trefny <vtrefny@redhat.com>
Date: Mon, 17 Sep 2001 00:00:00 -0700
Subject: [PATCH] Allow running blivet without Python SELinux module

We'll simply set the SELinux flag to False when the module is not
available.

Fixes: #928

Removed  the test from original patch as they are not present in the
pypi repo

Signed-off-by: Karthik Prabhu Vinod <karthik.prabhu.vinod@intel.com>
---
 blivet/flags.py |  9 +++++++--
 blivet/util.py  | 14 +++++++++++++-
 2 files changed, 20 insertions(+), 3 deletions(-)

diff --git a/blivet/flags.py b/blivet/flags.py
index 6500be3..fd85410 100644
--- a/blivet/flags.py
+++ b/blivet/flags.py
@@ -20,7 +20,6 @@
 #
 
 import shlex
-import selinux
 
 
 class Flags(object):
@@ -40,7 +39,13 @@ class Flags(object):
         #
         # enable/disable functionality
         #
-        self.selinux = selinux.is_selinux_enabled()
+        try:
+            import selinux
+        except ImportError:
+            self.selinux = False
+        else:
+            self.selinux = selinux.is_selinux_enabled()
+
         self.multipath = True
         self.dmraid = True
         self.ibft = True
diff --git a/blivet/util.py b/blivet/util.py
index 48b7818..df9fb95 100644
--- a/blivet/util.py
+++ b/blivet/util.py
@@ -3,7 +3,6 @@ import functools
 import glob
 import itertools
 import os
-import selinux
 import subprocess
 import re
 import sys
@@ -38,6 +37,13 @@ from threading import Lock
 # this will get set to anaconda's program_log_lock in enable_installer_mode
 program_log_lock = Lock()
 
+try:
+    import selinux
+except ImportError:
+    HAVE_SELINUX = False
+else:
+    HAVE_SELINUX = True
+
 
 SYSTEMD_SERVICE = "org.freedesktop.systemd1"
 SYSTEMD_MANAGER_PATH = "/org/freedesktop/systemd1"
@@ -450,6 +456,8 @@ def get_cow_sysfs_path(dev_path, dev_sysfsPath):
 
 def match_path_context(path):
     """ Return the default SELinux context for the given path. """
+    if not HAVE_SELINUX:
+        raise RuntimeError("SELinux python bindings not available")
     context = None
     try:
         context = selinux.matchpathcon(os.path.normpath(path), 0)[1]
@@ -475,6 +483,8 @@ def set_file_context(path, context, root=None):
 
             True if successful, False if not.
     """
+    if not HAVE_SELINUX:
+        raise RuntimeError("SELinux python bindings not available")
     if root is None:
         root = '/'
 
@@ -506,6 +516,8 @@ def reset_file_context(path, root=None):
 
             If successful, returns the file's new/default context.
     """
+    if not HAVE_SELINUX:
+        raise RuntimeError("SELinux python bindings not available")
     context = match_path_context(path)
     if context:
         if set_file_context(path, context, root=root):
-- 
2.30.0

